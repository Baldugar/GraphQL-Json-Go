// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Model struct {
	Name   string        `json:"name"`
	Fields []*ModelField `json:"fields"`
}

type ModelField struct {
	Name       string         `json:"name"`
	Type       ModelFieldEnum `json:"type"`
	IsNullable bool           `json:"isNullable"`
	SubFields  []*ModelField  `json:"subFields,omitempty"`
}

type ModelFieldInput struct {
	Name       string             `json:"name"`
	Type       ModelFieldEnum     `json:"type"`
	IsNullable bool               `json:"isNullable"`
	SubFields  []*ModelFieldInput `json:"subFields,omitempty"`
}

type ModelFieldEnum string

const (
	ModelFieldEnumString  ModelFieldEnum = "STRING"
	ModelFieldEnumInt     ModelFieldEnum = "INT"
	ModelFieldEnumFloat   ModelFieldEnum = "FLOAT"
	ModelFieldEnumBoolean ModelFieldEnum = "BOOLEAN"
	ModelFieldEnumArray   ModelFieldEnum = "ARRAY"
	ModelFieldEnumObject  ModelFieldEnum = "OBJECT"
)

var AllModelFieldEnum = []ModelFieldEnum{
	ModelFieldEnumString,
	ModelFieldEnumInt,
	ModelFieldEnumFloat,
	ModelFieldEnumBoolean,
	ModelFieldEnumArray,
	ModelFieldEnumObject,
}

func (e ModelFieldEnum) IsValid() bool {
	switch e {
	case ModelFieldEnumString, ModelFieldEnumInt, ModelFieldEnumFloat, ModelFieldEnumBoolean, ModelFieldEnumArray, ModelFieldEnumObject:
		return true
	}
	return false
}

func (e ModelFieldEnum) String() string {
	return string(e)
}

func (e *ModelFieldEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModelFieldEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModelFieldEnum", str)
	}
	return nil
}

func (e ModelFieldEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
